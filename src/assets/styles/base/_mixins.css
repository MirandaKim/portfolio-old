/****************************************************/
/*                                                 */
/*   CSS Mixins (_mixins.css)                     */
/*                                               */
/************************************************/
/*

  - Library of css mixins with may be used by the css
  - These mixins are handled by the PostCSS plugin postcss-mixins (see ~/gulp/tasks/styles.task.js)
  - Mixin use example:
      .center-vertically {
        @mixin centerVert;
      }
  - Mixin use examples w/ content
      ul {
        @mixin atMedium {
          width: 50%;
        }
      }
      @mixin atTinyOnly {
        .hidden-on-tiny {
          display: hidden;
        }
      }


  *************
  * Contents: *
  *************

  # Media Queries
    > Landscape
    > Portrait
    > Tiny Screen
    > Small Screen
    > Medium Screen
    > Large Screen
    > XL Screen
    > Squished Screen
    > Crushed Screen
    > Pancake Screen

  # Structural
    > Clearfix
    > Center Vertically

  # Images
    > Parallax

  # Links
    > Inline
    > Override Button

*/

/**************************************/
/*   # Media Queries                 */
/************************************/

/******************
*   > Landscape   *
******************/

@define-mixin forLandscape {
  @media only screen and (orientation: landscape){
    @mixin-content;
  }
}

/*****************
*   > Portrait   *
*****************/

@define-mixin forPortrait {
  @media only screen and (orientation: portrait){
    @mixin-content;
  }
}


/*********************
*   > Tiny Screen   *
*********************/
/* Extra small devices (e.g. phones) */
@define-mixin forTiny {
  @media only screen and (max-width: $screen_tiny) {
    @mixin-content;
  }
}


/*********************
*   > Small Screen   *
*********************/
/* Small devices (e.g. portrait tablets and large phones) */
@define-mixin atSmall {
  @media only screen and (min-width: $screen_small) {
    @mixin-content;
  }
}

/**********************
*   > Medium Screen   *
**********************/
/* Medium devices (e.g. landscape tablets) */
@define-mixin atMedium {
  @media only screen and (min-width: $screen_medium) {
    @mixin-content;
  }
}

/*********************
*   > Large Screen   *
*********************/
/* Large devices (e.g. laptops/desktops) */
@define-mixin atLarge {
  @media only screen and (min-width: $screen_large) {
    @mixin-content;
  }
}

/******************
*   > XL Screen   *
******************/
/* Extra large devices (e.g. large laptops and desktops) */
@define-mixin atXL {
  @media only screen and (min-width: $screen_xl) {
    @mixin-content;
  }
}

/******************
*   > XXL Screen   *
******************/
/* Extra large devices (e.g. large laptops and desktops) */
@define-mixin atXXL {
  @media only screen and (min-width: $screen_xxl) {
    @mixin-content;
  }
}

/************************
*   > Squished Screen   *
************************/
/* A device that is longer than a portable device, but with a small height
(e.g. squished browser window) */
@define-mixin atSquished {
  @media only screen and (max-height: $screen_squished_height) and (min-width: $screen_squished_width) {
    @mixin-content;
  }
}

/***********************
*   > Crushed Screen   *
***********************/
/* A device that is longer than a portable device, but with a very small height
(e.g. very squished browser window) */
@define-mixin atCrushed {
  @media only screen and (max-height: $screen_crushed_height) and (min-width: $screen_crushed_width) {
    @mixin-content;
  }
}

/***********************
*   > Pancake Screen   *
***********************/
/* A device that is longer than a portable device,
but with about as little height as you can get
(e.g. very, very squished browser window) */
@define-mixin atPancake {
  @media only screen and (max-height: $screen_pancake_height) and (min-width: $screen_pancake_width) {
    @mixin-content;
  }
}


/**************************************/
/*   # Structural                    */
/************************************/

/****************
*  > Clearfix   *
****************/
@define-mixin clearfix {
  &::after {
    content: "";
    clear: both;
    display: table;
  }
}

/*************************
*  > Center Vertically   *
**************************
This mixin centers the element vertically within its parent (assuming position).
NOTE: the element and container must both have a position for this to work!
*/
@define-mixin centerVert {
  top: 50%;
  transform: translateY(-50%);
}

/**************************************/
/*   # Images                        */
/************************************/

/****************
*  > Parallax   *
****************/

@define-mixin imageParallax{
  background-size: cover;
  min-height: 100%;
  background-attachment: fixed;
  background-position: center center;
  background-repeat: no-repeat;
}

/**************************************/
/*   # Links                         */
/************************************/

/***************
*   > Inline   *
***************/

@define-mixin inlineLink(){
  /*display*/
  display: inline-block;
  /*position*/
  position: relative;
  /*typography*/
  text-decoration: none;
  /*colors*/
  color: $color_textLink_inline;
  /*transitions*/
  transition-property: all;
  transition-duration: 100ms;
  /*typography*/
  letter-spacing: 1.2px;

  &::after {
    content: "";
    /*display*/
    display: block;
    /*position*/
    position: absolute;
    bottom: 1px;
    /*structure*/
    width: 100%;
    /*borders*/
    border-top-width: 2px;
    border-top-style: dashed;
    /*colors*/
    border-color: $color_neutralLight;
    /*transitions*/
    transition-property: all;
    transition-duration: 100ms;
  }

  &:hover {
    /*colors*/
    color: $color_textLink_inline_hover;
  }
  &:hover::after {
    /*colors*/
    border-color: $color_textLink_inline_hover;
  }
}

/************************
*   > Override Button   *
************************/

@define-mixin overrideButton(){
  /*borders*/
  border-style: none;
  border-radius: 0;
  /*spacing*/
  padding: 0;
  /*colors*/
  background-color: transparent;
}
