import $ from 'jquery';

/****************************************************/
/*                                                 */
/*   Carousel                                     */
/*                                               */
/************************************************/
/*

  - Loop through a collection of items.
  - Carousel includes play and pause feature.
    The controls to trigger the play/pause events are assumed to be within the selected carousel.
    See the constructor function for the play/pause selectors
  - The animations are assumed to be handled by CSS (with the exception of the progress bar),
    this logic only changes class names based on events.
  - This manages a single carousel. Each carousel should have its own instance of this class.
  - Progress Bar: The progress bar represents the time left on a slide/item before it switches to the next one.
    The animation for the progress bar should be controlled in this scripts as it is dependent on the
    timeloop of the items and is effected by the carousel controls.
  - Controls:
      Play - click to loop through all items (use this.controlSelectors.play when creating in html/css)
      Pause - click to stop item loop (use this.controlSelectors.pause when creating in html/css)
      Next - click to go to the next item (use this.controlSelectors.next when creating in html/css)
      Previous - click to go to the previous item (use this.controlSelectors.previous when creating in html/css)
      Jump - click to go to the jump to a specific item (the html is generated by this script,
             use this.controlSelectors.jump when styling in css,
             use this.elementSelectors.jumpWrapper for creating/styling the wrapper they will be appended to)

  *************
  * Contents: *
  *************

  # Constructor
      > Properties
  # Config
      > Item Time
  # Public
      > Enable
      > Play
      > Pause
      > Next
      > Previous
      > Jump
  # Protected
      > Initialize Carousel
      > Generate Components
      > Set Control Events
      > Item Loop
      > Animate Progress Bar
      > Reset Progress Bar
      > Change Active
  # Export

*/

class Carousel {

  /**************************************/
  /*   # Constructor                   */
  /************************************/

  constructor() {
    /*******************
    *   > Properties   *
    *******************/

    this._carousel;
    this._items = {};
    this._itemCount = 0;
    this._currentItem = 0;
    this._isPlaying = false;
    this._itemTime = 10000;
    this._itemLoop;
    this._itemProgressBar;

    /*carousel element classes*/
    this._elementClasses = {};
    this._elementClasses.jump = 'carousel__jump';

    /*carousel element selectors*/
    this._elementSelectors = {};
    this._elementSelectors.item = '.carousel__item';
    this._elementSelectors.jumpWrapper = '.carousel__jump-controls';
    this._elementSelectors.timer = '.carousel__timer';

    /*data attributes*/
    this._itemIndexAttr = 'data-carousel-index';

    /*carousel control selectors*/
    this._controlSelectors = {};
    this._controlSelectors.next = '.carousel__move-next';
    this._controlSelectors.previous = '.carousel__move-previous';
    this._controlSelectors.jump = `.${this._elementClasses.jump}`;
    this._controlSelectors.play = '.carousel__play';
    this._controlSelectors.pause = '.carousel__pause';
    this._controlSelectors.playToggle = '.carouse__play-toggle';

    /*carousel states*/
    this._states = {};
    this._states.isPlayingClass = "carousel--is-playing";
    this._states.isCurrentItemClass = "carousel__item--active";
    this._states.isCurrentJumpClass = "carousel__jump--active";

  }

  /**************************************/
  /*   # Config                        */
  /************************************/

  /******************
  *   > Item Time   *
  ******************/
  /*the amount of time in item is active until the carousel moves to the next item*/
  get itemTime(){ return this._itemTime; }
  set itemTime(timeMS){ this._itemTime = timeMS; }

  /**************************************/
  /*   # Public                        */
  /************************************/

   /***************
   *   > Enable   *
   ***************/

  enable(carouselSelector, beginPlay = true){
    /*get carousel*/
    this._carousel = $(carouselSelector);
    if(this._carousel){
      /*prep carousel: generate elements and set events*/
      this._initializeCarousel();
      /*set the initial active item*/
      this._changeActive(this._currentItem);
      /*begin carousel play if allowed initially*/
      if(beginPlay){
        this.play();
      }
    }else{
      console.log(`Debug: carousel ${carouselSelector} not found.`)
    }
  }

  /*************
  *   > Play   *
  *************/

  play(){
    this._carousel.addClass(this._states.isPlayingClass);
    this._isPlaying = true;
    this._itemLoop = this._createItemLoop();
  }

  /**************
  *   > Pause   *
  **************/

  pause(){
    this._isPlaying = false;
    this._carousel.removeClass(this._states.isPlayingClass);
    clearInterval(this._itemLoop);
    this._resetProgressBar(0);
  }

  /*************
  *   > Next   *
  *************/

  /*Make the next indexed item active in the carousel.
    This will loop back to the first item if the end is reached.*/
  next(){
    let targetItem = this._currentItem + 1;
    let nextItem =  targetItem >= this._itemCount ? 0 : targetItem;
    this._changeActive_keepPlayState(nextItem);
  }

  /*****************
  *   > Previous   *
  *****************/

  /*Make the previous indexed item active in the carousel.
    This will loop to the last item if there is no previous item.*/
  previous(){
    let targetItem = this._currentItem - 1;
    let previousItem =  targetItem < 0 ? this._itemCount - 1 : targetItem;
    this._changeActive_keepPlayState(previousItem);
  }

  /*************
  *   > Jump   *
  *************/

  /*Make the */
  jump(itemIndex = 0){
    this._changeActive_keepPlayState(itemIndex);
  }

  /**************************************/
  /*   # Protected                     */
  /************************************/

  /****************************
  *   > Initialize Carousel   *
  ****************************/
  _initializeCarousel(){
    this._items = this._carousel.find(this._elementSelectors.item)
    this._itemCount = this._items.length;
    this._progressBar = $(this._elementSelectors.timer);
    if(this._itemCount > 0){
      this._generateComponents();
      this._setEvent_play();
      this._setEvent_pause();
      this._setEvent_playToggle_keypress();
      this._setEvent_next();
      this._setEvent_previous();
      this._setEvent_jump();
    }
  }

  /****************************
  *   > Generate Components   *
  ****************************/

  /*Create any html components for the carousel:
    - Generate a jump button for each of the carousel items.
  */
  _generateComponents (){
    this._generateJumpButtons();
  }

  /*
  Create a html element to the user to click to jump to a specific carousel item.
  */
  _generateJumpButtons(){
    /*jump control wrapper*/
    let jumpWrapper = this._carousel.find(this._elementSelectors.jumpWrapper);
    /*for each item:*/
    $(this._items).each((i, v) => {
      /*give item index attribute*/
      $(v).attr(this._itemIndexAttr, i);
      /*give create jump control for item*/
      let jumpControl = `<div class="${this._elementClasses.jump}" ${this._itemIndexAttr}="${i}"></div>`;
      $(jumpWrapper).append(jumpControl);
    });
    this._jumps = this._carousel.find(this._controlSelectors.jump);
  }

  /***************************
  *   > Set Control Events   *
  ***************************/

  /*Set user event to play the carousel animation loop once the 'play' button is clicked*/
  _setEvent_play(){
    let playButton = this._carousel.find(this._controlSelectors.play);
    $(playButton).click(()=>{
      this.play();
    });
  }

  /*Set user event to pause the carousel animation loop once the 'pause' button is clicked*/
  _setEvent_pause(){
    let pauseButton = this._carousel.find(this._controlSelectors.pause);
    $(pauseButton).click(()=>{
      this.pause();
    });
  }

  _setEvent_playToggle_keypress(){
    let toggleButton = this._carousel.find(this._controlSelectors.playToggle);
    $(toggleButton).keypress((e) => {
      alert(e.keyCode);
      if(e.keyCode == 13 || e.which == 13){
        if(this._isPlaying){
          this.pause();
        }
        else {
          this.play();
        }
      }
    });
  }


  /*Set user event to jump to the next carousel item once the 'next' button is clicked*/
  _setEvent_next(){
    $(this._controlSelectors.next).click(()=>{
      this.next();
    });
  }

  /*Set user event to jump to the previous carousel item once the 'previous' button is clicked*/
  _setEvent_previous(){
    $(this._controlSelectors.previous).click(()=>{
      this.previous();
    });
  }

  /*Set user event to jump to a specific carousel item once the 'jump' button is clicked.*/
  _setEvent_jump(){
    let jumps = this._carousel.find(this._controlSelectors.jump);
    $(jumps).click((e)=>{
      let indexStr = $(e.target).attr(this._itemIndexAttr);
      let indexInt = parseInt(indexStr);
      this.jump(indexInt);
    });
  }

  /******************
  *   > Item Loop   *
  ******************/

  /*Set interval for changing the active class on the carousel items,
  and set timer animation for the progress bar.*/
  _createItemLoop(){
    this._animateProgressBar(this._itemTime);
    /*create interval*/
    let loop = setInterval(()=>{
      /*animate timer*/
      this._animateProgressBar(this._itemTime);
      /*go to next slide*/
      this.next();
    }, this._itemTime);
    /*return loop*/
    return loop;
  }

  /*****************************
  *   > Animate Progress Bar   *
  *****************************/

  /*Start animation of progress bar*/
  _animateProgressBar(time){
    let resetTime = 100;
    this._progressBar.animate({
      width: 0
    }, (time - resetTime), 'linear', () => {
      this._resetProgressBar(resetTime);
    });
  }

  /***************************
  *   > Reset Progress Bar   *
  ***************************/

  /*Reset animation bar (bring back to the top--ready for the next slide)*/
  _resetProgressBar(resetTime){
    this._progressBar.stop(true, true).animate({
      width: '100%'
    }, resetTime);
  }

  /**********************
  *   > Change Active   *
  **********************/

  /*Change which carousel item is active.
  This is done by changing which item has the active class.*/
  _changeActive(index){
    /*remove active class from carousel items*/
    $(this._items).removeClass(this._states.isCurrentItemClass);
    $(this._jumps).removeClass(this._states.isCurrentJumpClass);
    /*target new item*/
    let itemSelector = `${this._elementSelectors.item}[${this._itemIndexAttr}=${index}]`;
    let newItem = this._carousel.find(itemSelector);
    /*target new active jump control*/
    let jumpSelector = `${this._controlSelectors.jump}[${this._itemIndexAttr}=${index}]`;
    let newJump = this._carousel.find(jumpSelector);
    /*add active class to current carousel elements*/
    $(newItem).addClass(this._states.isCurrentItemClass);
    $(jumpSelector).addClass(this._states.isCurrentJumpClass);
    /*set new index*/
    this._currentItem = index;
  }

  /*Change active item in the carousel, but prevent a change in play state:
    if the carousel is currently playing, it will keep playing,
    if it is plaused, it will stay paused.*/
  _changeActive_keepPlayState(itemIndex){
    if(this._isPlaying){
      this.pause();
      this._changeActive(itemIndex);
      this.play();
    }
    else{
      this._changeActive(itemIndex);
    }
  }

}

/**************************************/
/*   # Export                        */
/************************************/

export default Carousel;
